import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import aiohttp
import asyncio
from datetime import datetime
import sys
import imaplib
import email
from email.header import decode_header
import re

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Get bot token and validate it
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN or BOT_TOKEN == 'your_telegram_bot_token':
    logging.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ 'your_telegram_bot_token' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    sys.exit(1)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# States
class AuthStates(StatesGroup):
    waiting_for_auth = State()
    waiting_for_password = State()


# Yandex OAuth configuration
YANDEX_AUTH_URL = "https://oauth.yandex.ru/authorize"
YANDEX_TOKEN_URL = "https://oauth.yandex.ru/token"
YANDEX_SCOPES = "mail:imap_full"  # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ —á–µ—Ä–µ–∑ IMAP

# Store user tokens and email credentials
user_tokens = {}
user_credentials = {}
last_email_ids = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


def decode_email_header(header):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞"""
    decoded = []
    for part, encoding in decode_header(header):
        if isinstance(part, bytes):
            decoded.append(part.decode(encoding or 'utf-8'))
        else:
            decoded.append(part)
    return ''.join(decoded)


def get_email_text(email_message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–∏—Å—å–º–∞"""
    text = ""
    if email_message.is_multipart():
        for part in email_message.walk():
            if part.get_content_type() == "text/plain":
                try:
                    text += part.get_payload(decode=True).decode()
                except:
                    text += part.get_payload()
    else:
        try:
            text = email_message.get_payload(decode=True).decode()
        except:
            text = email_message.get_payload()
    return text.strip()


async def check_emails(user_id: int):
    logging.info(f"Starting email check for user {user_id}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in last_email_ids:
        last_email_ids[user_id] = set()
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID –ø–∏—Å–µ–º, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        try:
            credentials = user_credentials[user_id]
            imap = imaplib.IMAP4_SSL('imap.yandex.ru')
            imap.login(credentials['email'], credentials['password'])
            imap.select('INBOX')
            status, messages = imap.search(None, 'ALL')
            if status == 'OK':
                last_email_ids[user_id] = set(messages[0].split())
            imap.close()
            imap.logout()
        except Exception as e:
            logging.error(f"Error during initial email check: {str(e)}")

    while user_id in user_credentials:
        try:
            credentials = user_credentials[user_id]
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
            imap = imaplib.IMAP4_SSL('imap.yandex.ru')
            imap.login(credentials['email'], credentials['password'])

            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö
            imap.select('INBOX')

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞
            status, messages = imap.search(None, 'ALL')

            if status == 'OK':
                # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ø–∏—Å–µ–º
                current_ids = set(messages[0].split())

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ last_email_ids)
                new_ids = current_ids - last_email_ids[user_id]

                if new_ids:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
                    for msg_id in reversed(
                            sorted(new_ids)):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                            status, msg_data = imap.fetch(msg_id, '(RFC822)')
                            if status == 'OK':
                                email_body = msg_data[0][1]
                                email_message = email.message_from_bytes(email_body)

                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–µ
                                subject = decode_email_header(email_message['subject'] or '–ë–µ–∑ —Ç–µ–º—ã')
                                from_addr = decode_email_header(email_message['from'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                date = email_message['date'] or '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
                                full_text = get_email_text(email_message)

                                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                short_text = full_text[:200] + "..." if len(full_text) > 200 else full_text

                                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∏—Å—å–º–∞
                                email_id = f"{user_id}_{msg_id.decode()}"

                                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
                                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(
                                        text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
                                        callback_data=f"show_full_{email_id}"
                                    )]
                                ])

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                message_text = (
                                    f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:\n"
                                    f"–û—Ç: {from_addr}\n"
                                    f"–¢–µ–º–∞: {subject}\n"
                                    f"–î–∞—Ç–∞: {date}\n\n"
                                    f"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{short_text}"
                                )

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                if 'email_texts' not in user_credentials[user_id]:
                                    user_credentials[user_id]['email_texts'] = {}
                                user_credentials[user_id]['email_texts'][email_id] = {
                                    'full_text': full_text,
                                    'short_text': short_text,
                                    'from_addr': from_addr,
                                    'subject': subject,
                                    'date': date
                                }

                                await bot.send_message(user_id, message_text, reply_markup=keyboard)
                                logging.info(f"Sent notification about new email to user {user_id}")
                        except Exception as e:
                            logging.error(f"Error processing email {msg_id}: {str(e)}")
                            continue

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ID
                last_email_ids[user_id] = current_ids

            imap.close()
            imap.logout()

        except Exception as e:
            logging.error(f"Error checking emails for user {user_id}: {str(e)}")
            await bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {str(e)}")

        await asyncio.sleep(30)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –Ø–Ω–¥–µ–∫—Å", callback_data="auth_yandex")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –ü–æ—á—Ç–æ–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "auth_yandex")
async def process_auth_button(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º redirect_uri –∏–∑ .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    redirect_uri = os.getenv('YANDEX_REDIRECT_URI', 'https://oauth.yandex.ru/verification_code')

    auth_url = f"{YANDEX_AUTH_URL}?response_type=code&client_id={os.getenv('YANDEX_CLIENT_ID')}&redirect_uri={redirect_uri}&scope={YANDEX_SCOPES}"

    # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Generated auth URL: {auth_url}")

    await callback.message.answer(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n{auth_url}\n\n"
        "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥."
    )
    await state.set_state(AuthStates.waiting_for_auth)
    await callback.answer()


@dp.message(AuthStates.waiting_for_auth)
async def process_auth_code(message: types.Message, state: FSMContext):
    auth_code = message.text.strip()

    try:
        async with aiohttp.ClientSession() as session:
            # Exchange auth code for access token
            async with session.post(YANDEX_TOKEN_URL, data={
                'grant_type': 'authorization_code',
                'code': auth_code,
                'client_id': os.getenv('YANDEX_CLIENT_ID'),
                'client_secret': os.getenv('YANDEX_CLIENT_SECRET')
            }) as response:
                if response.status == 200:
                    token_data = await response.json()
                    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    async with session.get('https://login.yandex.ru/info', headers={
                        'Authorization': f'OAuth {token_data["access_token"]}'
                    }) as user_info_response:
                        if user_info_response.status == 200:
                            user_info = await user_info_response.json()
                            email = user_info.get('default_email')

                            if email:
                                await message.answer(
                                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
                                    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—á—Ç–µ —á–µ—Ä–µ–∑ IMAP –≤–∞–º –Ω—É–∂–Ω–æ:\n"
                                    "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ø–Ω–¥–µ–∫—Å: https://id.yandex.ru/security\n"
                                    "2. –í —Ä–∞–∑–¥–µ–ª–µ '–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å\n"
                                    "3. –í—ã–±–µ—Ä–∏—Ç–µ '–ü–æ—á—Ç–∞' –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
                                    "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ"
                                )
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                                user_credentials[message.from_user.id] = {
                                    'email': email,
                                    'waiting_for_password': True
                                }
                                await state.set_state(AuthStates.waiting_for_password)
                            else:
                                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        else:
                            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
                else:
                    response_text = await response.text()
                    logging.error(f"Token request failed: {response.status} - {response_text}")
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logging.error(f"Error during token exchange: {str(e)}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@dp.message(AuthStates.waiting_for_password)
async def process_app_password(message: types.Message, state: FSMContext):
    if message.from_user.id not in user_credentials:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.")
        await state.clear()
        return

    app_password = message.text.strip()
    user_credentials[message.from_user.id]['password'] = app_password
    user_credentials[message.from_user.id]['waiting_for_password'] = False

    await message.answer("‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—à—É –ø–æ—á—Ç—É.")
    await state.clear()

    # Start email checking loop
    asyncio.create_task(check_emails(message.from_user.id))


@dp.callback_query(F.data.startswith("show_full_"))
async def show_full_email(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∏—Å—å–º–∞ –∏–∑ callback_data
        email_id = callback.data.replace("show_full_", "")
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞
        if user_id in user_credentials and 'email_texts' in user_credentials[user_id] and email_id in \
                user_credentials[user_id]['email_texts']:
            email_data = user_credentials[user_id]['email_texts'][email_id]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            full_message = (
                f"üìß –ü–∏—Å—å–º–æ:\n"
                f"–û—Ç: {email_data['from_addr']}\n"
                f"–¢–µ–º–∞: {email_data['subject']}\n"
                f"–î–∞—Ç–∞: {email_data['date']}\n\n"
                f"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{email_data['full_text']}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–∫—Ä—ã—Ç—å"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìñ –°–∫—Ä—ã—Ç—å",
                    callback_data=f"hide_full_{email_id}"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(full_message, reply_markup=keyboard)
            await callback.answer()
        else:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logging.error(f"Error showing full email: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞", show_alert=True)


@dp.callback_query(F.data.startswith("hide_full_"))
async def hide_full_email(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∏—Å—å–º–∞ –∏–∑ callback_data
        email_id = callback.data.replace("hide_full_", "")
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞
        if user_id in user_credentials and 'email_texts' in user_credentials[user_id] and email_id in \
                user_credentials[user_id]['email_texts']:
            email_data = user_credentials[user_id]['email_texts'][email_id]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            short_message = (
                f"üìß –ü–∏—Å—å–º–æ:\n"
                f"–û—Ç: {email_data['from_addr']}\n"
                f"–¢–µ–º–∞: {email_data['subject']}\n"
                f"–î–∞—Ç–∞: {email_data['date']}\n\n"
                f"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{email_data['short_text']}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
                    callback_data=f"show_full_{email_id}"
                )]
            ])

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(short_message, reply_markup=keyboard)
            await callback.answer()
        else:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logging.error(f"Error hiding full email: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –ø–∏—Å—å–º–∞", show_alert=True)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main()) 