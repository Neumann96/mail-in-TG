import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
import aiohttp
import asyncio
from datetime import datetime
import sys
import imaplib
import email
from email.header import decode_header
import re
import locale
import dateparser

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_TIME, 'Russian_Russia.1251')
    except:
        logging.warning("Could not set Russian locale")

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Get bot token and validate it
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN or BOT_TOKEN == 'your_telegram_bot_token':
    logging.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
    logging.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–º–µ–Ω–∏—Ç–µ 'your_telegram_bot_token' –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    sys.exit(1)

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


# States
class AuthStates(StatesGroup):
    waiting_for_auth = State()


# Yandex OAuth configuration
YANDEX_AUTH_URL = "https://oauth.yandex.ru/authorize"
YANDEX_TOKEN_URL = "https://oauth.yandex.ru/token"
YANDEX_SCOPES = "mail:imap_full"  # –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ —á–µ—Ä–µ–∑ IMAP

# Store user tokens and email credentials
user_tokens = {}
user_credentials = {}
last_email_ids = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ –º–µ—Å—è—Ü–µ–≤
DAYS = {
    'Mon': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tue': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wed': '–°—Ä–µ–¥–∞',
    'Thu': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Fri': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Sat': '–°—É–±–±–æ—Ç–∞',
    'Sun': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

MONTHS = {
    'Jan': '–Ø–Ω–≤–∞—Ä—è',
    'Feb': '–§–µ–≤—Ä–∞–ª—è',
    'Mar': '–ú–∞—Ä—Ç–∞',
    'Apr': '–ê–ø—Ä–µ–ª—è',
    'May': '–ú–∞—è',
    'Jun': '–ò—é–Ω—è',
    'Jul': '–ò—é–ª—è',
    'Aug': '–ê–≤–≥—É—Å—Ç–∞',
    'Sep': '–°–µ–Ω—Ç—è–±—Ä—è',
    'Oct': '–û–∫—Ç—è–±—Ä—è',
    'Nov': '–ù–æ—è–±—Ä—è',
    'Dec': '–î–µ–∫–∞–±—Ä—è'
}


def decode_email_header(header):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∏—Å—å–º–∞"""
    decoded = []
    for part, encoding in decode_header(header):
        if isinstance(part, bytes):
            decoded.append(part.decode(encoding or 'utf-8'))
        else:
            decoded.append(part)
    return ''.join(decoded)


def get_email_text(email_message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–∏—Å—å–º–∞"""
    text = ""
    if email_message.is_multipart():
        for part in email_message.walk():
            if part.get_content_type() == "text/plain":
                try:
                    text += part.get_payload(decode=True).decode()
                except:
                    text += part.get_payload()
    else:
        try:
            text = email_message.get_payload(decode=True).decode()
        except:
            text = email_message.get_payload()
    return text.strip()


def format_email_date(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –ø–∏—Å—å–º–∞ –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç"""
    if not date_str:
        return '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'

    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
        parts = date_str.split()
        if len(parts) < 5:
            return date_str

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–∞—Ç—ã
        day_of_week = DAYS.get(parts[0].rstrip(','), parts[0])  # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏–∑ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        day = parts[1]
        month = MONTHS.get(parts[2], parts[2])
        year = parts[3]
        time = parts[4].split(':')[0:2]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
        time_str = ':'.join(time)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é
        formatted_date = f"{day_of_week}, {day} {month} {year}, {time_str}"
        return formatted_date
    except Exception as e:
        logging.error(f"Error formatting date {date_str}: {str(e)}")
        return date_str


async def check_emails(user_id: int):
    logging.info(f"Starting email check for user {user_id}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in last_email_ids:
        last_email_ids[user_id] = set()
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ ID –ø–∏—Å–µ–º, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        try:
            credentials = user_credentials[user_id]
            imap = imaplib.IMAP4_SSL('imap.yandex.ru')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            imap.authenticate('XOAUTH2',
                              lambda x: f"user={credentials['email']}\1auth=Bearer {credentials['access_token']}\1\1")
            imap.select('INBOX')
            status, messages = imap.search(None, 'ALL')
            if status == 'OK':
                last_email_ids[user_id] = set(messages[0].split())
            imap.close()
            imap.logout()
        except Exception as e:
            logging.error(f"Error during initial email check: {str(e)}")

    while user_id in user_credentials:
        try:
            credentials = user_credentials[user_id]
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP —Å–µ—Ä–≤–µ—Ä—É
            imap = imaplib.IMAP4_SSL('imap.yandex.ru')
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OAuth —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            imap.authenticate('XOAUTH2',
                              lambda x: f"user={credentials['email']}\1auth=Bearer {credentials['access_token']}\1\1")

            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤—Ö–æ–¥—è—â–∏—Ö
            imap.select('INBOX')

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞
            status, messages = imap.search(None, 'ALL')

            if status == 'OK':
                # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ø–∏—Å–µ–º
                current_ids = set(messages[0].split())

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ (—Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ last_email_ids)
                new_ids = current_ids - last_email_ids[user_id]

                if new_ids:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
                    for msg_id in reversed(
                            sorted(new_ids)):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–æ
                            status, msg_data = imap.fetch(msg_id, '(RFC822)')
                            if status == 'OK':
                                email_body = msg_data[0][1]
                                email_message = email.message_from_bytes(email_body)

                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—Å—å–º–µ
                                subject = decode_email_header(email_message['subject'] or '–ë–µ–∑ —Ç–µ–º—ã')
                                from_addr = decode_email_header(email_message['from'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                date_str = email_message['date']
                                date = format_email_date(date_str) if date_str else '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞'
                                full_text = get_email_text(email_message)

                                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                short_text = full_text[:200] + "..." if len(full_text) > 200 else full_text

                                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –ø–∏—Å—å–º–∞
                                email_id = f"{user_id}_{msg_id.decode()}"

                                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
                                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(
                                        text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
                                        callback_data=f"show_full_{email_id}"
                                    )]
                                ])

                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                message_text = (
                                    f"üìß –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ:\n"
                                    f"–û—Ç: {from_addr}\n"
                                    f"–¢–µ–º–∞: {subject}\n"
                                    f"–î–∞—Ç–∞: {date}\n\n"
                                    f"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{short_text}"
                                )

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                if 'email_texts' not in user_credentials[user_id]:
                                    user_credentials[user_id]['email_texts'] = {}
                                user_credentials[user_id]['email_texts'][email_id] = {
                                    'full_text': full_text,
                                    'short_text': short_text,
                                    'from_addr': from_addr,
                                    'subject': subject,
                                    'date': date
                                }

                                await bot.send_message(user_id, message_text, reply_markup=keyboard)
                                logging.info(f"Sent notification about new email to user {user_id}")
                        except Exception as e:
                            logging.error(f"Error processing email {msg_id}: {str(e)}")
                            continue

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ID
                last_email_ids[user_id] = current_ids

            imap.close()
            imap.logout()

        except Exception as e:
            logging.error(f"Error checking emails for user {user_id}: {str(e)}")
            await bot.send_message(user_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—á—Ç—ã: {str(e)}")

        await asyncio.sleep(30)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –Ø–Ω–¥–µ–∫—Å", callback_data="auth_yandex")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å –ü–æ—á—Ç–æ–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è:",
        reply_markup=keyboard
    )


@dp.callback_query(F.data == "auth_yandex")
async def process_auth_button(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º redirect_uri –∏–∑ .env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    redirect_uri = os.getenv('YANDEX_REDIRECT_URI', 'https://oauth.yandex.ru/verification_code')

    auth_url = f"{YANDEX_AUTH_URL}?response_type=code&client_id={os.getenv('YANDEX_CLIENT_ID')}&redirect_uri={redirect_uri}&scope={YANDEX_SCOPES}"

    # –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Generated auth URL: {auth_url}")

    await callback.message.answer(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n{auth_url}\n\n"
        "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥."
    )
    await state.set_state(AuthStates.waiting_for_auth)
    await callback.answer()


@dp.message(AuthStates.waiting_for_auth)
async def process_auth_code(message: types.Message, state: FSMContext):
    auth_code = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–¥–æ–º (–∫–æ–¥ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
    if not auth_code or len(auth_code) < 4:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ –æ–±—ã—á–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
        ])
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
            reply_markup=keyboard
        )
        return

    try:
        async with aiohttp.ClientSession() as session:
            # Exchange auth code for access token
            async with session.post(YANDEX_TOKEN_URL, data={
                'grant_type': 'authorization_code',
                'code': auth_code,
                'client_id': os.getenv('YANDEX_CLIENT_ID'),
                'client_secret': os.getenv('YANDEX_CLIENT_SECRET')
            }) as response:
                if response.status == 200:
                    token_data = await response.json()
                    logging.info(f"Successfully received token data: {token_data}")

                    # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    async with session.get('https://login.yandex.ru/info', headers={
                        'Authorization': f'OAuth {token_data["access_token"]}'
                    }) as user_info_response:
                        if user_info_response.status == 200:
                            user_info = await user_info_response.json()
                            logging.info(f"Received user info: {user_info}")

                            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å email —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                            email = None
                            if 'default_email' in user_info:
                                email = user_info['default_email']
                            elif 'emails' in user_info and user_info['emails']:
                                email = user_info['emails'][0]
                            elif 'login' in user_info:
                                email = f"{user_info['login']}@yandex.ru"

                            if email:
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                user_credentials[message.from_user.id] = {
                                    'email': email,
                                    'access_token': token_data['access_token'],
                                    'refresh_token': token_data.get('refresh_token')
                                }

                                await message.answer(
                                    "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—à—É –ø–æ—á—Ç—É."
                                )
                                await state.clear()

                                # Start email checking loop
                                asyncio.create_task(check_emails(message.from_user.id))
                            else:
                                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
                                ])
                                logging.error(f"Could not determine email from user info: {user_info}")
                                await message.answer(
                                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
                                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ø–Ω–¥–µ–∫—Å.–ü–æ—á—Ç–µ.\n"
                                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑.",
                                    reply_markup=keyboard
                                )
                        else:
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
                            ])
                            error_text = await user_info_response.text()
                            logging.error(f"Error getting user info: {user_info_response.status} - {error_text}")
                            await message.answer(
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. "
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑.",
                                reply_markup=keyboard
                            )
                else:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
                    ])
                    response_text = await response.text()
                    logging.error(f"Token request failed: {response.status} - {response_text}")
                    error_data = await response.json()

                    if error_data.get('error') == 'invalid_grant':
                        # –ö–æ–¥ –∏—Å—Ç–µ–∫, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é", callback_data="auth_yandex")],
                            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
                        ])
                        await message.answer(
                            "‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                            reply_markup=keyboard
                        )
                    else:
                        await message.answer(
                            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑.",
                            reply_markup=keyboard
                        )
    except Exception as e:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_auth")]
        ])
        logging.error(f"Error during token exchange: {str(e)}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –µ—â–µ —Ä–∞–∑.",
            reply_markup=keyboard
        )


@dp.callback_query(F.data == "cancel_auth")
async def cancel_auth(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –Ø–Ω–¥–µ–∫—Å'."
    )
    await callback.answer()


async def send_long_message(chat_id: int, text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏"""
    MAX_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    if len(text) <= MAX_LENGTH:
        await bot.send_message(chat_id, text, reply_markup=reply_markup)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""

    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º
    paragraphs = text.split('\n')
    for paragraph in paragraphs:
        if len(current_part) + len(paragraph) + 1 <= MAX_LENGTH:
            current_part += paragraph + '\n'
        else:
            if current_part:
                parts.append(current_part)
            current_part = paragraph + '\n'

    if current_part:
        parts.append(current_part)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
    for i, part in enumerate(parts):
        if i == 0:  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await bot.send_message(chat_id, part, reply_markup=reply_markup)
        else:  # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await bot.send_message(chat_id, part)


@dp.callback_query(F.data.startswith("show_full_"))
async def show_full_email(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∏—Å—å–º–∞ –∏–∑ callback_data
        email_id = callback.data.replace("show_full_", "")
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞
        if user_id in user_credentials and 'email_texts' in user_credentials[user_id] and email_id in \
                user_credentials[user_id]['email_texts']:
            email_data = user_credentials[user_id]['email_texts'][email_id]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            full_message = (
                f"üìß –ü–∏—Å—å–º–æ:\n"
                f"–û—Ç: {email_data['from_addr']}\n"
                f"–¢–µ–º–∞: {email_data['subject']}\n"
                f"–î–∞—Ç–∞: {email_data['date']}\n\n"
                f"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{email_data['full_text']}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–∫—Ä—ã—Ç—å"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìñ –°–∫—Ä—ã—Ç—å",
                    callback_data=f"hide_full_{email_id}"
                )]
            ])

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            await send_long_message(user_id, full_message, keyboard)
            await callback.answer()
        else:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logging.error(f"Error showing full email: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞", show_alert=True)


@dp.callback_query(F.data.startswith("hide_full_"))
async def hide_full_email(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–∏—Å—å–º–∞ –∏–∑ callback_data
        email_id = callback.data.replace("hide_full_", "")
        user_id = callback.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–∏—Å—å–º–∞
        if user_id in user_credentials and 'email_texts' in user_credentials[user_id] and email_id in \
                user_credentials[user_id]['email_texts']:
            email_data = user_credentials[user_id]['email_texts'][email_id]

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            short_message = (
                f"üìß –ü–∏—Å—å–º–æ:\n"
                f"–û—Ç: {email_data['from_addr']}\n"
                f"–¢–µ–º–∞: {email_data['subject']}\n"
                f"–î–∞—Ç–∞: {email_data['date']}\n\n"
                f"–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:\n{email_data['short_text']}"
            )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
                    callback_data=f"show_full_{email_id}"
                )]
            ])

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
            await bot.send_message(user_id, short_message, reply_markup=keyboard)
            await callback.answer()
        else:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        logging.error(f"Error hiding full email: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –ø–∏—Å—å–º–∞", show_alert=True)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main()) 